import { Router, Request, Response } from 'express';
import prisma from '../database';
import { Prisma } from '@prisma/client';

const router = Router();

// Mock LLM client
// import { GoogleGenerativeAI } from '@google/generative-ai';
// const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

router.post('/generate/character', async (req: Request, res: Response) => {
  const { prompt, contextId, campaignId } = req.body;

  if (!prompt || !contextId || !campaignId) {
    return res.status(400).json({ error: 'prompt, contextId, and campaignId are required.' });
  }

  try {
    // 1. Construct Context
    const room = await prisma.mapElement.findUnique({
      where: { id: contextId },
    });

    // This part is simplified. A real app would have a more complex context hierarchy.
    const campaign = await prisma.campaign.findUnique({
      where: { id: parseInt(campaignId, 10) }
    });

    // 2. Assemble Prompt (Simplified)
    const finalPrompt = `
      Campaign: ${campaign?.name}
      Room: ${room?.data ? (room.data as any).label : 'Unknown'}
      ---
      User Request: Generate a character based on the following: "${prompt}"
      ---
      Return a JSON object with keys: "name", "description", "stats".
    `;

    console.log('--- Assembled Prompt ---');
    console.log(finalPrompt);

    // 3. Call LLM (Mocked) & 4. Process Response
    const mockCharacterData = {
      name: `Generated Character: ${prompt.substring(0, 20)}`,
      description: 'A character generated by the mighty LLM, with a story yet to be told.',
      stats: { str: 10, dex: 12, con: 14, int: 8, wis: 13, cha: 16 },
    };

    // 5. Persist Data
    const newElement = await prisma.mapElement.create({
      data: {
        campaignId: parseInt(campaignId, 10),
        parentElementId: contextId,
        type: 'character',
        positionX: 150, // Mocked position
        positionY: 250, // Mocked position
        data: mockCharacterData as Prisma.InputJsonValue,
        id: `char_${new Date().getTime()}` // Mocked ID
      }
    });

    // 6. Send Response
    res.status(201).json(newElement);

  } catch (err) {
    console.error('Character generation failed:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router; 