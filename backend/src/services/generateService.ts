import prisma from '../database';
import { Prisma } from '@prisma/client';

export const generateCharacter = async (prompt: string, contextId: string, campaignId: string) => {
  // 1. Construct Context
  const area = await prisma.mapElement.findUnique({
    where: { id: contextId },
  });

  const campaign = await prisma.campaign.findUnique({
    where: { id: parseInt(campaignId, 10) },
  });

  // 2. Assemble Prompt (Simplified)
  const finalPrompt = `
    Campaign: ${campaign?.name}
    Area: ${area?.data ? (area.data as any).label : 'Unknown'}
    ---
    User Request: Generate a character based on the following: "${prompt}"
    ---
    Return a JSON object with keys: "name", "description", "stats".
  `;

  console.log('--- Assembled Prompt ---');
  console.log(finalPrompt);

  // 3. Call LLM (Mocked) & 4. Process Response
  const mockCharacterData = {
    name: `Generated Character: ${prompt.substring(0, 20)}`,
    description: 'A character generated by the mighty LLM, with a story yet to be told.',
    stats: { str: 10, dex: 12, con: 14, int: 8, wis: 13, cha: 16 },
  };

  // 5. Persist Data
  const newElement = await prisma.mapElement.create({
    data: {
      campaignId: parseInt(campaignId, 10),
      parentElementId: contextId,
      type: 'character',
      positionX: 150, // Mocked position
      positionY: 250, // Mocked position
      data: mockCharacterData as Prisma.InputJsonValue,
      id: `char_${new Date().getTime()}`, // Mocked ID
    },
  });

  return newElement;
}; 